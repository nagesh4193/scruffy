{
  "name": "Scruffy",
  "tagline": "Scruffy. The Janitor.",
  "body": "Scruffy\r\n=======\r\n\r\n![build](https://travis-ci.org/snare/scruffy.svg?branch=master)\r\n\r\n*Scruffy. The Janitor.*\r\n\r\nScruffy is a framework for taking care of a bunch of boilerplate in Python apps. It handles the loading of configuration files, the loading and management of plugins, and the management of other filesystem resources such as temporary files and directories, log files, etc.\r\n\r\nA typical use case for Scruffy is a command-line Python tool with some or all of the following requirements:\r\n\r\n* Read a set of configuration defaults\r\n* Read a local configuration file and apply it on top of the defaults\r\n* Allow overriding some configuration options with command line flags or at runtime\r\n* Load a core set of Python-based plugins\r\n* Load a set of user-defined Python-based plugins\r\n* Generate log files whose name, location and other logging settings are based on configuration\r\n* Store application state between runs in a file or database\r\n\r\nScruffy is used by [Voltron](https://github.com/snare/voltron) and [Calculon](https://github.com/snare/calculon).\r\n\r\nInstallation\r\n------------\r\n\r\nA standard python setup script is included.\r\n\r\n    $ python setup.py install\r\n\r\nThis will install the Scruffy package wherever that happens on your system.\r\n\r\nAlternately, Scruffy can be installed with `pip` from PyPi (where it's called `scruffington`, because I didn't check for a conflict before I named it).\r\n\r\n    $ pip install scruffington\r\n\r\nQuick start\r\n-----------\r\n\r\n### Config\r\n\r\nLoad a user config file, and apply it on top of a set of defaults loaded from inside the Python package we're currently running from.\r\n\r\n*thingy.yaml*:\r\n```yaml\r\nsome_property:  1\r\nother_property: a thing\r\n```\r\n\r\n*thingy.py*:\r\n```python\r\nfrom scruffy import ConfigFile\r\n\r\nc = ConfigFile('thingy.yaml', load=True,\r\n    defaults=File('defaults.yaml', parent=PackageDirectory())\r\n)\r\n\r\nprint(\"c.some_property == {c.some_property}\".format(c=c))\r\nprint(\"c.other_property == {c.other_property}\".format(c=c))\r\n```\r\n\r\nRun it:\r\n```\r\n$ python thingy.py\r\nc.some_property == 1\r\nc.other_property == a thing\r\n```\r\n\r\n### Plugins\r\n\r\nLoad some plugins.\r\n\r\n*~/.thingy/plugins/example.py*:\r\n```python\r\nfrom scruffy import Plugin\r\n\r\nclass ExamplePlugin(Plugin):\r\n    def do_a_thing(self):\r\n        print('{}.{} is doing a thing'.format(__name__, self.__class__.__name__))\r\n```\r\n\r\n*thingy.py*:\r\n```python\r\nfrom scruffy import PluginDirectory, PluginRegistry\r\n\r\npd = PluginDirectory('~/.thingy/plugins')\r\npd.load()\r\n\r\nfor p in PluginRegistry.plugins:\r\n    print(\"Initialising plugin {}\".format(p))\r\n    p().do_a_thing()\r\n```\r\n\r\nRun it:\r\n```\r\n$ python thingy.py\r\nInitialising plugin <class 'example.ExamplePlugin'>\r\nexample.ExamplePlugin is doing a thing\r\n```\r\n\r\n### Logging\r\n\r\nScruffy's `LogFile` class will do some configuration of Python's `logging` module.\r\n\r\n*log.py*:\r\n```python\r\nimport logging\r\nfrom scruffy import LogFile\r\n\r\nlog = logging.getLogger('main')\r\nlog.setLevel(logging.INFO)\r\nLogFile('/tmp/thingy.log', logger='main').configure()\r\n\r\nlog.info('Hello from log.py')\r\n```\r\n\r\n*/tmp/thingy.log*:\r\n```\r\nHello from log.py\r\n```\r\n\r\n### Environment\r\n\r\nScruffy's `Environment` class ties all the other stuff together. The other classes can be instantiated as named children of an `Environment`, which will load any `Config` objects, apply the configs to the other objects, and then prepare the other objects.\r\n\r\n*~/.thingy/config*:\r\n```yaml\r\nlog_dir:    /tmp/logs\r\nlog_file:   thingy.log\r\n```\r\n\r\n*env.py*:\r\n```python\r\nfrom scruffy import *\r\n\r\ne = Environment(\r\n    main_dir=Directory('~/.thingy', create=True,\r\n        config=ConfigFile('config', defaults=File('defaults.yaml', parent=PackageDirectory())),\r\n        lock=LockFile('lock')\r\n        user_plugins=PluginDirectory('plugins')\r\n    ),\r\n    log_dir=Directory('{config:log_dir}', create=True\r\n        LogFile('{config:log_file}', logger='main')\r\n    ),\r\n    pkg_plugins=PluginDirectory('plugins', parent=PackageDirectory())\r\n)\r\n```\r\n\r\nDocumentation\r\n-------------\r\n\r\nSee the [wiki](https://github.com/snare/scruffy/wiki) on github.\r\n\r\n## Bugs\r\n\r\nSee the [issue tracker](https://github.com/snare/voltron/issues) on github.\r\n\r\nLicense\r\n-------\r\n\r\nSee LICENSE file. If you use this and don't hate it, buy me a beer at a conference some time.\r\n\r\nCredits\r\n-------\r\n\r\nProps to [richo](http://github.com/richo). Flat duck pride.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}